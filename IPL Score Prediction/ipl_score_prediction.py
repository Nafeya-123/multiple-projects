# -*- coding: utf-8 -*-
"""IPL score Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kkImakm_TeV95ewnVETzMqj2SJF_7di3
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import keras
import tensorflow as tf
from tensorflow.keras.layers import Dense, Dropout, BatchNormalization, LeakyReLU
from tensorflow.keras.optimizers import Adam
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
import joblib

ipl = pd.read_csv("/content/drive/MyDrive/A new project/IPL score prediction/ipl_dataset.csv")

df = ipl.drop(['date', 'runs', 'wickets', 'overs', 'runs_last_5', 'wickets_last_5','mid', 'striker', 'non-striker'], axis = 1)
X = df.drop(['total'], axis=1)
y = df['total']

venue_encoder = LabelEncoder()
batting_team_encoder = LabelEncoder()
bowling_team_encoder = LabelEncoder()
striker_encoder = LabelEncoder()
bowler_encoder = LabelEncoder()


X['venue'] = venue_encoder.fit_transform(X['venue'])
X['bat_team'] = batting_team_encoder.fit_transform(X['bat_team'])
X['bowl_team'] = bowling_team_encoder.fit_transform(X['bowl_team'])
X['batsman'] = striker_encoder.fit_transform(X['batsman'])
X['bowler'] = bowler_encoder.fit_transform(X['bowler'])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
print(X_train.columns)
scaler = MinMaxScaler()

X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
print(X_train_scaled.shape)

model = keras.Sequential([

    keras.layers.Input(shape=(X_train_scaled.shape[1],)),


    Dense(512),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dropout(0.3),

    Dense(256),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dropout(0.3),


    Dense(128),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dropout(0.3),

    Dense(1, activation='linear')
])

huber_loss = tf.keras.losses.Huber(delta=1.0)
model.compile(optimizer=Adam(learning_rate=0.001), loss=huber_loss)

model.summary()

model.fit(X_train_scaled, y_train, epochs=20, batch_size=64, validation_data=(X_test_scaled, y_test))

predictions = model.predict(X_test_scaled)

mae = mean_absolute_error(y_test, predictions)
mse = mean_squared_error(y_test, predictions)

print(f"Mean Absolute Error: {mae}")
print(f"Mean Squared Error: {mse}")

# Save the trained model
joblib.dump(model, 'ipl_score_model.pkl')

# Save the label encoders
joblib.dump(venue_encoder, 'venue_encoder.pkl')
joblib.dump(batting_team_encoder, 'batting_team_encoder.pkl')
joblib.dump(bowling_team_encoder, 'bowling_team_encoder.pkl')
joblib.dump(striker_encoder, 'striker_encoder.pkl')
joblib.dump(bowler_encoder, 'bowler_encoder.pkl')

# Save the scaler
joblib.dump(scaler, 'scaler.pkl')

